name: (Prod) Plan & Apply Terraform

on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"

  pull_request:
    branches:
      - main
    paths-ignore:
      - "README.md"

env:
  SAS_TOKEN: ${{secrets.SAS_TOKEN}}

jobs:
  plan:
    name: Terraform Plan

    if: github.event_name == 'pull_request'
    environment: production
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./platform/production

    env:
      # for terraform HTTP requests to Azure ARM services with required ARM_ prefix
      ARM_CLIENT_ID: ${{secrets.CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.TENANT_ID}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=devlin-modulename-rg-prod" \
            -backend-config="storage_account_name=devlinmodulenamesaprod" \
            -backend-config="container_name=devlinmodulecontainerprod" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="sas_token=${{env.SAS_TOKEN}}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -var-file=config.tfvars
        continue-on-error: true

      - name: Uncolored Terraform Plan for Bot
        id: plan
        run: terraform plan -no-color -var-file=config.tfvars
        continue-on-error: true

      - name: Terraform PR commands Info
        uses: actions/github-script@v4
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  apply:
    name: Terraform Apply

    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./platform/production

    env:
      # for terraform HTTP requests to Azure ARM services with required ARM_ prefix
      ARM_CLIENT_ID: ${{secrets.CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.TENANT_ID}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=devlin-modulename-rg-prod" \
            -backend-config="storage_account_name=devlinmodulenamesaprod" \
            -backend-config="container_name=devlinmodulecontainerprod" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="sas_token=${{env.SAS_TOKEN}}"

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -var-file=config.tfvars

      - name: Terraform Destroy
        id: destroy
        run: terraform destroy --auto-approve -var-file=config.tfvars
